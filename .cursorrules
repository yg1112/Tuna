# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information

# Scratchpad

# Audio Buddy Development Plan

## Project Overview
开发一个 macOS 菜单栏应用，用于管理音频输入/输出设备和音量控制。

## Core Features
- [X] 创建项目基础结构
  - [X] AudioBuddyApp.swift - 应用入口
  - [X] AudioManager.swift - 音频设备管理
  - [X] MenuBarView.swift - 菜单栏界面
  - [X] Models/AudioDevice.swift - 设备模型
- [ ] 实现音频设备管理核心功能
  - [X] 枚举音频设备
  - [ ] 切换默认设备
  - [ ] 音量控制
- [ ] 实现菜单栏界面
  - [X] 设备列表显示
  - [ ] 音量控制滑块
  - [ ] 实时状态更新
- [ ] 附加功能
  - [ ] 音量电平显示
  - [ ] 快捷键支持
  - [ ] 开机自启动

## Project Cleanup (2024-04-09)
- [X] 整理项目目录结构
  - [X] 删除备份文件 (AudioManager.swift.bak, MenuBarView.swift.new)
  - [X] 合并 Views 模块到 Tuna 模块
  - [X] 删除不再使用的 Dial 目录
  - [X] 更新代码引用关系
- [X] 建立备份目录保存旧文件

## Current Task
实现设备切换功能：
1. 在 AudioManager 中添加切换默认设备的方法
2. 实现设备选择的回调函数
3. 添加音量控制功能

## Next Steps
1. 完善 AudioManager 中的设备切换功能
2. 添加音量控制相关的 API 调用
3. 实现音量控制滑块 UI

## Notes
- 使用 Swift + SwiftUI 开发
- 需要使用 Core Audio 框架
- 目标 macOS 版本：10.15 及以上

## Lessons Learned
- Core Audio API 需要正确处理权限
- 使用 @Published 属性包装器实现 UI 自动更新
- 设备监听器需要正确管理内存
- 项目模块化管理，避免重复代码和文件冗余