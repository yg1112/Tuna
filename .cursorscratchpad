# Tuna项目开发状态追踪

## Module: KeyboardShortcutCapture
- Status: ✅ Ready for Commit
- Prompt: 改进键盘快捷键捕获组件，提高代码质量和修复编译问题
- Branch: keyboardshortcut_improvements

### 任务清单
- [x] 重构KeyboardShortcutKey类，提高代码质量
- [x] 修复KeyboardShortcutCaptureView中的编译错误
- [x] 改进KeyCombination结构体的实现
- [x] 添加详细的代码注释
- [x] 调整文件组织结构
- [x] 更新项目文档
- [x] 创建测试应用示例
- [x] 移除Carbon框架依赖，使用原生AppKit API

### 功能实现细节
1. KeyboardShortcutKey优化：
   - 重构为纯公共API，提高代码清晰度
   - 改进键码映射和字符表示
   - 增强修饰键处理逻辑
   - 添加详细注释和方法说明
   - 完善错误日志记录

2. KeyboardShortcutCaptureView改进：
   - 修复self引用问题，确保正确的变量访问
   - 改进SwiftUI集成，使用NSViewRepresentable
   - 增强错误处理和用户反馈
   - 优化UI响应性能

3. 文件组织结构调整：
   - 创建Utils目录存放辅助工具类
   - 确保正确的导入和依赖关系
   - 规范文件头注释和模块说明

### 文件修改列表
- KeyboardShortcutCapture/KeyboardShortcutKey.swift - 完全重构
- KeyboardShortcutCapture/KeyboardShortcutCaptureView.swift - 修复编译错误
- ShortcutCaptureTestApp/ShortcutCaptureTestApp/KeyboardShortcutKey.swift - 创建副本
- ShortcutCaptureTestApp/README.md - 更新项目文档
- ShortcutCaptureTestApp/.cursorscratchpad - 更新状态追踪

### Manual Verification
- 编译验证: ✅
- KeyboardShortcutKey功能: ✅
- KeyboardShortcutCaptureView显示: ✅
- 快捷键捕获功能: ✅
- 文档更新: ✅

### 下一步操作
1. 提交改进的代码到keyboardshortcut_improvements分支
2. 考虑将KeyboardShortcutCapture组件提取为独立的Swift Package
3. 扩展快捷键管理功能，支持更多场景

## Module: QuickDictation
- Status: ✅ Ready for Commit
- Prompt: 添加Dictation全局快捷键功能，使用户能通过快捷键快速开启语音转写
- Branch: quickdictation0414

### 任务清单
- [x] 创建KeyboardShortcutManager类，用于管理全局快捷键
- [x] 在TunaSettings中添加Dictation快捷键设置项
- [x] 在WhispenTabView中添加快捷键设置UI
- [x] 实现全局快捷键注册和监听功能
- [x] 实现快捷键触发时切换至Dictation Tab并开始录音的功能
- [x] 手动测试验证
- [x] 构建验证
- [x] UI测试实现

### 功能实现细节
1. 添加了TunaSettings中的两个新设置项：
   - enableDictationShortcut: Bool - 控制是否启用快捷键功能
   - dictationShortcutKeyCombo: String - 存储快捷键组合（如 "option+t"）

2. 创建了新的KeyboardShortcutManager类：
   - 使用Carbon API实现全局快捷键注册和监听
   - 监听设置变化，动态更新快捷键
   - 快捷键触发时自动打开应用并开始转写

3. 在TunaSettingsView的Whispen标签页中添加了快捷键设置UI：
   - 开关控制快捷键功能启用/禁用
   - 文本框输入快捷键组合
   - 应用按钮将更改应用到系统

4. 在AppDelegate中初始化KeyboardShortcutManager，确保应用启动时开始监听快捷键

5. 添加了在MenuBarView中对switchToTab通知的处理，使快捷键可以切换至Dictation选项卡

6. 创建UI测试项目ShortcutCaptureTestApp：
   - 实现了快捷键捕获组件KeyboardShortcutCaptureView
   - 添加了捕获禁用/启用控制
   - 添加了快捷键清除功能
   - 实现了基本UI测试

### Manual Verification
- Shortcut enabled: ✅
- Key combination recognition: ✅
- App activation: ✅
- Tab switching: ✅
- Recording started: ✅
- UI tests: ✅

### Build Status
- Status: ✅ Passed

### 构建注意事项
- 构建通过，只有一些警告，无错误
- KeyboardShortcutManager使用Carbon API实现全局快捷键功能，在macOS 13.0及以上版本上可用
- 默认使用"option+t"作为快捷键组合，用户可以在设置中自定义
- UI测试项目提供了快捷键捕获组件的可重用实现

### 下一步操作
1. 考虑扩展快捷键管理器，支持更多应用功能的快捷键
2. 改进KeyboardShortcutCaptureView，增加更多自定义选项
3. 优化UI测试，增加更多测试场景

所有文件已就绪，可以提交到`quickdictation0414`分支。

## Module: HotKeyE2EProbe
- Status: ✅ Ready for Commit
- Prompt: 创建专用的快捷键测试应用，用于E2E测试和问题诊断

### Tasks:
- [x] 创建ShortcutManager类
- [x] 实现日志记录和诊断功能
- [x] 创建主视图ContentView
- [x] 实现快捷键设置视图
- [x] 添加应用配置和用户设置
- [x] 添加测试用例
- [x] 实现自动化测试脚本

### Implementation Details:
1. 创建了ShortcutManager类，实现了：
   - 使用HotKey库注册全局快捷键
   - 详细的诊断功能
   - 全面的日志记录
   - 可配置的快捷键组合

2. 创建了应用UI：
   - 主视图显示快捷键状态和诊断信息
   - 设置视图用于录制快捷键
   - 视觉反馈显示快捷键触发

3. 设置应用配置：
   - 用UserDefaults存储设置
   - 支持重置所有设置
   - 添加应用命令和菜单项

4. 测试功能：
   - 创建单元测试验证ShortcutManager功能
   - 实现UI测试验证用户界面交互
   - 添加健壮性测试验证应用稳定性
   - 提供测试指南和文档

### Manual Verification:
- 快捷键注册: ✅
- 快捷键录制: ✅
- 诊断功能: ✅
- 设置保存: ✅
- 触发反馈: ✅
- 单元测试: ✅
- UI测试: ✅

### Next Steps:
- 集成到主项目的CI/CD流程
- 添加自动化测试报告
- 持续改进诊断功能
- 根据使用反馈优化用户界面

### Known Issues:
- 需要处理系统权限问题（Accessibility权限）
- UI测试中无法直接模拟全局快捷键触发，需要使用模拟方法 

## Module: ShortcutFix
- Status: ✅ Complete
- Prompt: 修复快捷键触发Dictation功能的问题
- Completed On: 2024-05-11

### 任务清单
- [x] 分析快捷键触发流程中的问题
- [x] 修复DictationManager中的切换Tab逻辑
- [x] 测试快捷键功能
- [x] 确认问题已解决

### 实现细节
1. 问题分析：
   - 发现在处理快捷键的过程中，`MenuBarView.activateDictationTab()` 方法被调用，但实际上这个方法内部又发送了 `switchToTab` 通知
   - 这导致通知被重复发送，可能引起UI的异常行为

2. 修复方法：
   - 在 `DictationManager.swift` 中的 `handleDictationShortcutPressed()` 方法中
   - 直接发送 `switchToTab` 通知，而不是调用 `MenuBarView.activateDictationTab()`
   - 保留了对 `DictationManager.toggle()` 的调用，确保录音功能正常启动

3. 测试结果：
   - 按下快捷键 (cmd+u) 后，正确触发了快捷键处理函数
   - 成功发送 `switchToTab` 通知，将选项卡切换到 dictation
   - 录音功能正常启动
   - 日志显示所有流程正常工作

### Manual Verification
- 快捷键注册: ✅
- 选项卡切换: ✅
- 录音启动: ✅
- 日志正常: ✅

### 下一步操作
1. 考虑添加更多日志记录，以便于排查未来可能出现的问题
2. 优化快捷键处理逻辑，减少不必要的方法调用
3. 考虑添加快捷键触发的视觉反馈，提升用户体验 

## Module: AudioBuddyFeature
- Status: ✅ Ready for Commit
- Prompt: 添加AudioBuddy功能，使用户能通过全局快捷键管理音频设备和进行语音转写
- Branch: quickdictation0414

### 任务清单
- [x] 实现AudioBuddyApp作为主应用入口
- [x] 扩展AppDelegate支持AudioBuddy功能
- [x] 实现音频设备管理功能
- [x] 集成现有的Dictation功能
- [x] 添加窗口管理功能
- [x] 手动测试验证
- [x] 构建验证

### 功能实现细节
1. 创建了新的AudioBuddyApp：
   - 实现了SwiftUI应用入口
   - 设置应用主窗口和样式
   - 集成现有的Dictation功能

2. 扩展了AppDelegate：
   - 支持全局快捷键触发AudioBuddy功能
   - 优化应用初始化流程
   - 添加对新功能的配置支持

3. 添加了音频设备管理功能：
   - 实现AudioDevice类进行设备控制
   - 提供设备切换和状态查询功能
   - 添加设备列表和选择UI

4. 集成了现有的Dictation功能：
   - 保持与原有Dictation功能的兼容性
   - 优化用户界面和交互流程
   - 改进全局快捷键处理

5. 实现了窗口管理功能：
   - 通过MainWindowManager控制窗口显示
   - 优化窗口行为和样式

### Manual Verification
- 应用启动: ✅
- 全局快捷键: ✅
- 音频设备管理: ✅
- Dictation功能: ✅
- 窗口管理: ✅

### Build Status
- Status: ✅ Passed

### 构建注意事项
- 全部文件顺利构建
- 保持了与原有功能的兼容性
- 优化了用户体验和交互流程

### 下一步操作
1. 考虑添加更多音频设备管理功能
2. 优化用户界面和交互体验
3. 添加更多自定义选项
4. 考虑扩展全局快捷键功能

### 文件修改列表
- Sources/Tuna/AppDelegate.swift
- Sources/Tuna/AudioBuddyApp.swift
- Sources/Tuna/AudioDevice.swift
- Sources/Tuna/MenuBarView.swift
- Sources/Tuna/Models/DictationManager.swift
- Sources/Tuna/Models/KeyboardShortcutManager.swift
- Sources/Tuna/Models/TabRouter.swift
- Sources/Tuna/TunaSettings.swift
- Sources/Tuna/TunaSettingsView.swift
- Sources/Tuna/Views/TunaDictationView.swift

所有文件已就绪，可以提交到`quickdictation0414`分支。

## Module: AudioBuddyDocumentation
- Status: ✅ Complete
- Prompt: 创建AudioBuddy功能的用户指南和开发文档
- Completed On: 2024-05-18

### 任务清单
- [x] 创建AudioBuddy功能指南文档
- [x] 详细描述功能概述和使用方法
- [x] 添加技术实现细节和开发指南
- [x] 提供故障排除指南和最佳实践
- [x] 完成文档审核和格式调整

### 文档内容细节
1. 功能概述：
   - 描述AudioBuddy的核心功能和优势
   - 介绍全局快捷键、音频设备管理和语音转写功能
   - 突出窗口管理和用户交互流程

2. 使用指南：
   - 提供详细的快捷键设置步骤
   - 描述语音转写的使用流程
   - 说明音频设备管理功能的操作方法

3. 技术实现：
   - 列举主要组件和它们的功能职责
   - 提供核心实现代码示例
   - 描述组件之间的交互关系

4. 开发指南：
   - 提供新功能开发的建议方向
   - 包含代码示例和最佳实践
   - 添加注意事项和常见问题解决方案

5. 故障排除：
   - 创建常见问题的排查表格
   - 提供详细的解决方法和建议
   - 说明未来功能规划方向

### Manual Verification
- 文档内容准确性: ✅
- 格式和结构清晰: ✅
- 使用指南完整: ✅
- 技术细节正确: ✅
- 故障排除指南实用: ✅

### 下一步操作
1. 考虑将文档整合到应用内帮助系统
2. 随功能更新持续维护文档
3. 添加更多用例和高级配置示例
4. 考虑翻译文档支持多语言

### 文件创建列表
- docs/AudioBuddyGuide.md

文档已完成，可以与代码一起提交到`quickdictation0414`分支。

## Module: EditableDictationText
- Status: ✅ Complete
- Prompt: 实现听写文本输出框可编辑功能，使用户可以手动修改语音转文本结果
- Branch: improvement
- Completed On: 2025-04-16
- Released: V1.1

### 任务清单
- [x] 修改QuickDictationView中的文本输出框支持编辑
- [x] 优化TunaDictationView中的编辑功能
- [x] 添加编辑提示标签
- [x] 添加上下文菜单（右键菜单）支持更多文本操作
- [x] 实现文本格式化功能
- [x] 确保编辑的文本能够正确同步到DictationManager

### 功能实现细节
1. QuickDictationView的改进：
   - 将TextEditor绑定到本地状态变量，而非直接绑定到dictationManager
   - 添加状态同步逻辑，确保本地编辑能同步到dictationManager
   - 添加上下文菜单支持文本操作（复制、粘贴、格式化等）
   - 添加"点击文本可以编辑"提示

2. TunaDictationView的改进：
   - 增强TranscriptionTextBoxView的上下文菜单
   - 优化编辑体验（添加更多操作选项）
   - 添加文本格式化功能（首字母大写、句子格式优化）
   - 添加编辑提示标签

3. 共享功能：
   - 实现文本同步逻辑，确保用户编辑不会被转写更新覆盖
   - 优化占位符显示逻辑，提升用户体验
   - 添加清除文本功能
   - 整合录音控制到上下文菜单

### Manual Verification
- 文本编辑: ✅
- 内容同步: ✅
- 右键菜单: ✅
- 格式化功能: ✅
- 提示标签: ✅

### 发布信息
- 已合并到main分支
- 已标记为V1.1版本
- 已更新README.md和文档

### 下一步操作
1. 考虑添加更多文本处理功能，如拼写检查、自动格式化等
2. 优化文本输入体验，如自动滚动、高亮显示等
3. 添加键盘快捷键支持常用编辑操作

## Project Versions
### V1.1 (2025-04-16)
- ✨ 新功能: 听写文本输出框可编辑，用户可以手动修改语音转文本结果
- 🔧 添加文本格式化功能（首字母大写、句子格式优化）
- 📋 增强上下文菜单，提供更多文本操作选项
- 🔔 添加编辑提示标签
- 📝 更新文档和README
- 🧹 清理improvement分支

### V1.0 (2025-04-01)
- 🚀 初始版本发布
- 🎤 快速听写功能
- ⌨️ 全局快捷键支持
- 🔊 音频设备管理

所有文件已就绪，可以提交到`improvement`分支。

## Module: MenuBarFix
- Status: ✅ Complete
- Prompt: 修复状态栏鱼图标点击不显示弹出窗口的问题
- Completed On: 2024-05-18

### 任务清单
- [x] 添加测试文件和测试用例
- [x] 修复AppDelegate中的错误
- [x] 确保target和action设置正确
- [x] 验证修复是否生效

### 实现细节
1. 问题分析：
   - 状态栏鱼图标点击时不显示弹出窗口
   - 通过添加单元测试发现button的target和action设置有问题

2. 修复方法：
   - 在`AppDelegate.swift`的`setupStatusItem`方法中，确保正确设置了button的target和action
   - 调整`togglePopover`方法的签名为`togglePopover(_:)`以符合标准Selector格式
   - 添加`setupStatusItemForTesting`辅助方法以支持单元测试

3. 测试验证：
   - 创建测试确认button的target是AppDelegate实例
   - 验证button的action是`#selector(AppDelegate.togglePopover(_:))`
   - 构建项目确认没有错误

### Manual Verification
- 构建通过: ✅
- 点击图标显示弹窗: ✅

### 提交信息
```
fix(menu‑bar): wire status‑item button target/action and add popover tests

* Ensure button.target = self and button.action = #selector(togglePopover)
* Added MenuBarPopoverTests to verify wiring and that togglePopover shows content
```

## Module: MagicButton
- Status: ✅ Complete
- Prompt: 实现Magic Transform按钮功能，优化听写文本
- Branch: dev-magic-button
- Completed On: 2025-04-18
- Merged To: main

### 任务清单
- [x] 创建MagicTransformManager类管理转换逻辑
- [x] 实现MagicTransformService与OpenAI API集成
- [x] 在TunaDictationView中添加Magic按钮UI
- [x] 添加处理状态指示器和错误反馈
- [x] 添加测试用例验证功能
- [x] 确保错误处理和用户反馈完善

### 功能实现细节
1. MagicTransformManager实现：
   - 创建ObservableObject类进行状态管理
   - 添加处理状态跟踪（isProcessing）
   - 实现错误处理和消息显示
   - 集成剪贴板功能自动复制转换结果

2. MagicTransformService实现：
   - 创建网络服务与OpenAI API集成
   - 实现请求构建和响应处理
   - 添加错误处理和超时管理
   - 确保API密钥安全管理

3. TunaDictationView集成：
   - 在工具栏添加Magic按钮
   - 根据处理状态更新按钮图标
   - 显示处理进度消息
   - 实现错误提示反馈

4. 测试用例实现：
   - 创建单元测试验证转换功能
   - 添加模拟测试避免实际API调用
   - 测试错误处理和边界情况
   - 确保UI反馈正确显示

### Manual Verification
- 转换功能: ✅
- API集成: ✅
- 进度指示: ✅
- 错误处理: ✅
- 结果复制: ✅
- 单元测试: ✅

### 发布信息
- 已合并到main分支
- 代码已通过审查
- 所有测试通过

### 下一步操作
1. 考虑添加更多转换模式和选项
2. 优化API调用效率和响应速度
3. 添加更多定制化转换模板
4. 实现转换历史记录功能

### 文件修改列表
- Sources/Tuna/Models/MagicTransformManager.swift (新增)
- Sources/Tuna/Networking/MagicTransformService.swift (新增)
- Sources/Tuna/Views/TunaDictationView.swift (修改)
- Sources/Tuna/Models/DictationManager.swift (修改)
- Sources/Tuna/TunaSettings.swift (修改)
- Tests/MagicTransformTests/ (新增目录及测试文件) 

## Module: LeanSettings
- Status: ✅ Ready for Commit
- Prompt: 精简Tuna设置窗口，保持内容可见，优化UI体验
- Branch: dev-lean-settings

### 任务清单
- [x] 创建SettingsSidebarItemStyle修饰符
- [x] 更新侧边栏宽度为120pt
- [x] 调整图标尺寸为22×22pt
- [x] 更新标签字体为system 13-bold
- [x] 减少默认窗口高度约40%
- [x] 实现窗口自动调整高度功能
- [x] 设置窗口最大高度为800pt
- [x] 创建测试用例验证布局
- [x] 手动测试验证

### 功能实现细节
1. 更新了DesignTokens.swift：
   - 保持Metrics.sidebarW为120pt
   - 更新Typography.caption为bold样式
   - 创建SettingsSidebarItemStyle修饰符统一侧边栏样式

2. 更新了SidebarTab.swift：
   - 调整图标大小为22pt
   - 更新标签字体为system 13-bold
   - 优化组件内边距和布局

3. 更新了TunaSettingsView.swift：
   - 调整侧边栏宽度为120pt
   - 减少内边距和间距
   - 减少最小窗口高度

4. 更新了TunaSettingsWindow.swift：
   - 实现窗口自动调整高度功能
   - 根据内容高度自动计算理想高度
   - 设置窗口最大高度为800pt
   - 添加tab切换辅助方法用于测试

5. 创建了SettingsWindowLayoutTests.swift测试文件：
   - 测试侧边栏宽度
   - 测试默认窗口高度
   - 测试Audio选项卡内容是否适合窗口高度

### Manual Verification
- 侧边栏宽度: ✅
- 图标和字体大小: ✅
- 窗口高度减少: ✅
- 自动调整窗口高度: ✅
- 无垂直滚动条: ✅
- 布局测试: ✅

### Build Status
- Status: ✅ Passed

### 下一步操作
1. 合并到主分支
2. 考虑进一步优化设置项的布局和组织
3. 提升设置项的可访问性

所有文件已就绪，可以提交到`dev-lean-settings`分支。

## Module: CollapsibleCardClickFix
- Status: ✅ Complete
- Prompt: 彻底修复 CollapsibleCard 组件的点击展开功能，解决点击事件被拦截的问题
- Branch: fix-clickable-card-button
- Completed On: 2025-04-19

### 任务清单
- [x] 分析 CollapsibleCard 组件的点击问题根因
- [x] 修复绑定类型和点击事件处理
- [x] 实现更可靠的 Button 点击解决方案
- [x] 添加调试日志
- [x] 创建测试确认修复有效
- [x] 手动验证修复效果

### 实现细节
1. 问题根因分析：
   - 之前的解决方案不完全，点击事件仍然无法正确传递
   - 发现 CollapsibleCard 的 isExpanded 属性被错误地从 `@Binding var isExpanded` 改为了 `var isExpanded: Bool`，使卡片无法修改状态
   - 即使有 `.allowsHitTesting(false)`，背景和其他层也可能拦截点击事件

2. 完整修复方法：
   - 恢复 `@Binding var isExpanded` 确保状态可以被修改
   - 使用 Button 替换普通 HStack，Button 能自动穿透覆盖层
   - 在 label 部分添加自绘的 chevron 图标，并跟随展开状态改变
   - 使用 `.buttonStyle(.plain)` 确保按钮没有默认高亮效果
   - 保留 `.allowsHitTesting(false)` 在覆盖层上确保无事件拦截
   - 添加打印日志便于调试：`print("🔵 \(title) tapped")`

3. 测试验证：
   - 创建 CollapsibleCardTests 测试文件验证按钮功能
   - 实现 testButtonToggleExpandsCard 测试用例
   - 在 DictationSettingsView 中添加 onChange 调试器，监控状态变化

### Manual Verification
- Engine 卡片点击一次展开: ✅
- Engine 卡片保持展开状态: ✅
- API Key 字段正确显示: ✅
- Transcription Output 卡片点击展开: ✅
- Format 选择器正常工作: ✅
- Directory 选择器正常工作: ✅
- 单元测试通过: ✅

### 提交信息
"fix(settings): eliminate duplicate controls and ensure state consistency in DictationSettingsView"

### 备注
该修复适用于所有使用 CollapsibleCard 的地方，包括设置窗口中的 Engine 和 Transcription Output 卡片。使用 Button 作为点击区域是确保点击事件穿透所有覆盖层的最可靠解决方案。 

## Module: SettingsStateConsistency
- Status: ✅ Complete
- Prompt: 修复 DictationSettingsView 中折叠卡片展开后立即折叠的问题
- Branch: fix-clickable-card-button
- Completed On: 2025-04-19

### 任务清单
- [x] 分析 DictationSettingsView 状态管理问题
- [x] 添加调试日志确认问题根因
- [x] 移除重复控件和冗余状态变量
- [x] 确保 @State 变量保持一致
- [x] 测试修复效果

### 实现细节
1. 问题根因分析：
   - DictationSettingsView 中存在重复的控件结构，导致界面状态混乱
   - 同时存在 `@State private var apiKey` 和 `tunaSettings.apiKey` 两种不同的状态源
   - 同时存在 `@State private var selectedFormat` 和 `tunaSettings.exportFormat` 两种不同的状态源
   - 存在重复的 Output Format 和 Output Directory 控件（一组在 CollapsibleCard 外部，一组在内部）

2. 完整修复方法：
   - 仅保留必要的 @State 变量：isEngineExpanded、isTranscriptionOutputExpanded 和 isApiKeyValid
   - 移除冗余的 apiKey, selectedFormat 和 outputDirectory 局部状态变量
   - 删除 CollapsibleCard 外部重复的 Output Format 和 Output Directory 控件
   - 在 CollapsibleCard 中使用 tunaSettings 统一的数据源
   - 添加 `.onAppear` 和 `.onDisappear` 调试日志追踪视图生命周期

3. 其他改进：
   - 简化 selectOutputDirectory 函数，直接更新 tunaSettings.exportURL
   - 减少不必要的日志和调试信息
   - 实现 validateApiKey 函数，检查 API Key 格式有效性

### Manual Verification
- Engine 卡片点击一次展开: ✅
- Engine 卡片保持展开状态: ✅
- API Key 字段正确显示: ✅
- Transcription Output 卡片点击展开: ✅
- Format 选择器正常工作: ✅
- Directory 选择器正常工作: ✅
- 单元测试通过: ✅

### 提交信息
"fix(settings): eliminate duplicate controls and ensure state consistency in DictationSettingsView"

## Module: DocumentationUpdate
- Status: ✅ Complete
- Prompt: 优化文档格式
- Completed On: 2024-05-11

### 任务清单
- [x] 在 README.md 末尾添加空行，提高文档格式规范性

### Manual Verification
- README.md 格式检查: ✅