# .cursor/rules
# Central config for Cursor AI to minimise premium requests
default_model: gpt-4o-mini             # cheap/free for planning
models:
  planning: gpt-4o-mini
  coding: gpt-4o
after_apply:
  - run: swift build
  - run: swift test
  - run: |
      # Run integrity tests
      swift test --filter TypeDupTest
      swift test --filter UIStateIntegrityTest
      swift test --filter ObjConformanceTest
      swiftformat --requireExplicitSelf .
branch_prefixes:
  - dev-
  - fix-
  - feature/
  - infra/
disallow_random_branches: true
auto_delete_branch_on_merge: true
post_merge_hook: make branch-hygiene
skip_markers:
  start: "// cursor:skip-start"
  end: "// cursor:skip-end"
context:
  include_files:
    - Sources/Tuna/MenuBarView.swift
    - Sources/Tuna/TabRouter.swift
snippets_dir: .cursor/snippets

# 添加新规则
require_explicit_self: true
run_make_format_on_write: true
require_successful_swift_build: true
require_yamllint_pass: true
require_ui_presence_tests:
  - Shortcut
  - Magic Transform
  - Engine
  - Transcription Output
snapshot_tests_must_update: true

# Branch hygiene settings
auto_delete_branch_after_merge: true
cleanup_stale_branches_days: 30

rules:
  - name: CursorContextAutoUpdate
    description: "Keep .cursorscratchpad (full) and docs/GPT_CONTEXT.md (ChatGPT snapshot) in sync with source changes, then auto‑push branch to origin. Commit message embeds [gpt-context] <org>/<repo> for easy retrieval."
    trigger:
      on_change:
        - "**/*.swift"
        - "**/*.py"
        - "**/*.js"
        - "**/*.ts"
        - "**/*.go"
        - "**/*.rs"
        - "**/*.java"
        - "Package.*"
        - "pyproject.toml"
        - "Cargo.toml"
        - "requirements*.txt"
        - "package.json"
        - ".cursor/rules"
    steps:
      - run: |
          if [ ! -f tools/update_scratchpad.py ]; then
            echo "Bootstrapping generic context generator…"
            mkdir -p tools
            cat > tools/update_scratchpad.py <<'PY'
            #!/usr/bin/env python3
            # (same script body as前版，此处省略…)
            PY
            chmod +x tools/update_scratchpad.py
          fi
      - run: python tools/update_scratchpad.py
      - run: |
          if ! git diff --quiet -- .cursorscratchpad docs/GPT_CONTEXT.md; then
            git add .cursorscratchpad docs/GPT_CONTEXT.md
            REPO_PATH=$(git remote get-url origin | sed -E 's#.*github.com[:/](.+/[^/.]+)(\.git)?#\1#')
            git commit -m "docs: auto‑update project context [Cursor] [gpt-context] ${REPO_PATH}"
          else
            echo "Context already up‑to‑date."
          fi
      - run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          git push -u origin "${CURRENT_BRANCH}" || echo "🔐 Push skipped (no permission)."

  - name: UIInvariants
    description: "Ensure UI components maintain consistent appearance and behavior"
    trigger:
      on_change:
        - "**/*.swift"
    steps:
      - run: swift test
      - run: swiftformat .
      - run: |
          swift test --filter ThemeToggleTests
          swift test --filter VolumeSliderTests
          swift test --filter SettingsLayoutTests

  - name: UIStateIntegrity
    description: "Ensure UI state properties are properly managed and synchronized"
    trigger:
      on_change:
        - "**/*.swift"
    steps:
      - run: |
          # Run UI state integrity tests
          swift test --filter UIStateIntegrityTest
          
          # Verify no direct UserDefaults access for UI state
          if grep -r "UserDefaults.*\(is[A-Z][a-zA-Z]*Open\)" . --include="*.swift"; then
            echo "⚠️ Found direct UserDefaults access for UI state"
            echo "Please use UIState instead of UserDefaults for UI state management"
            exit 1
          fi
          
          # Verify no @State for UI expansion state
          if grep -r "@State.*is[A-Z][a-zA-Z]*Open" . --include="*.swift"; then
            echo "⚠️ Found @State for UI expansion state"
            echo "Please use @EnvironmentObject var ui: UIState instead"
            exit 1
          fi

  - name: CollapsibleCardExpansion
    description: "Never hard-code isExpanded = false in CollapsibleCard components"
    trigger:
      on_change:
        - "**/*.swift"
    steps:
      - run: |
          if grep -r "CollapsibleCard.*isExpanded:\s*false" . --include="*.swift"; then
            echo "⚠️ Found hard-coded isExpanded: false in CollapsibleCard"
            echo "Please bind to a @Published property instead"
            exit 1
          fi

  - name: TestResourcesSync
    description: "Keep TunaTests path and snapshot resources in sync; never leave failing snapshots"
    trigger:
      on_change:
        - "Tests/TunaTests/**/*.swift"
        - "Tests/TunaTests/__Snapshots__/**/*"
        - "Package.swift"
    steps:
      - run: |
          # Verify test target configuration
          if ! grep -q 'path: "Tests/TunaTests"' Package.swift; then
            echo "⚠️ Test target path missing in Package.swift"
            echo "Add path: \"Tests/TunaTests\" to the testTarget configuration"
            exit 1
          fi
          
          if ! grep -q 'resources: \[.process("__Snapshots__")\]' Package.swift; then
            echo "⚠️ Snapshot resources missing in Package.swift"
            echo "Add resources: [.process(\"__Snapshots__\")] to the testTarget configuration"
            exit 1
          fi

  - name: ExplicitSelfCheck
    description: "Enforce explicit self in closures"
    trigger:
      on_change:
        - "**/*.swift"
    steps:
      - run: |
          if ! swiftformat --config .swiftformat . --lint; then
            echo "⚠️ Found implicit self usage in closures"
            echo "Please run 'make format' to fix"
            exit 1
          fi

  - name: FormatOnWrite
    description: "Run SwiftFormat on file writes"
    trigger:
      on_write:
        - "**/*.swift"
    steps:
      - run: make format

  - name: TypeDuplicationCheck
    description: "Prevent duplicate type declarations and backup files"
    trigger:
      on_change:
        - "**/*.swift"
    steps:
      - run: swift test --filter TypeDupTest

  - name: ObservableObjectConformance
    description: "Ensure types used with @ObservedObject conform to ObservableObject"
    trigger:
      on_change:
        - "**/*.swift"
    steps:
      - run: swift test --filter ObjConformanceTest 